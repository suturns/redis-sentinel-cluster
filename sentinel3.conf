# 当前Sentinel服务运行的端口
port 26379
# 保护模式 no
protected-mode no

logfile "sentinel_log.log"
#被重写后，重新部署需修改为dir ./
dir "D:\\JAVA\\package\\Redis-x64-3.2.100"

# Sentinel去监视一个名为mymaster的主redis实例，
# 这个主实例的IP地址为本机地址127.0.0.1，端口号为6379，
# 而将这个主实例判断为失效至少需要2个Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行

# down-after-milliseconds指定了Sentinel认为Redis实例已经失效所需的毫秒数。
# 当实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。
# 只有一个Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线。
# 这时自动故障迁移才会执行

# parallel-syncs指定了在执行故障转移时，最多可以有多少个从Redis实例在同步新的主实例，
# 在从Redis实例较多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长
#sentinel myid bcfe4cf70eb2db6d5bcb8c61f4be817fa46c179a

# 如果在failover-timeout该时间（ms）内未能完成failover操作，则认为该failover失败
sentinel myid 963e8c7e75b4f35f4783c1634ac37ffe3552a62f
sentinel monitor MyMaster 127.0.0.1 6379 2
sentinel down-after-milliseconds MyMaster 5000
sentinel failover-timeout MyMaster 5000
sentinel parallel-syncs MyMaster 2
sentinel auth-pass MyMaster 123
########

# Generated by CONFIG REWRITE
sentinel config-epoch MyMaster 22
sentinel leader-epoch MyMaster 24
sentinel known-slave MyMaster 127.0.0.1 6380
sentinel known-slave MyMaster 127.0.0.1 6381
sentinel known-slave MyMaster 127.0.0.1 6382
sentinel known-sentinel MyMaster 127.0.0.1 26381 4b26df10a20eacc837d5629b903d874712220132
sentinel known-sentinel MyMaster 127.0.0.1 26380 38b16e75eeba340393feabbee074a76d9afb072d
sentinel current-epoch 24
